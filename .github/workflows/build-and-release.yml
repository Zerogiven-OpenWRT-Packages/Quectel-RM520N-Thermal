name: Build and Release OpenWRT IPK

env:
  # Zentrales Setzen der OpenWRT-Versionen (als JSON-Array)
  OPENWRT_VERSIONS: '["23.05", "24.10"]'

on:
  push:
    tags:
      - "*.*.*-r*"
  workflow_dispatch:

jobs:
  build:
    name: Build OpenWRT IPK
    runs-on: ubuntu-latest
    strategy:
      # Nutzt das zentrale JSON-Array für die Matrix
      matrix:
        openwrt_version: ${{ fromJson(env.OPENWRT_VERSIONS) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up OpenWRT SDK
        uses: openwrt/gh-action-sdk@main
        env:
          # Hier wird die Version dynamisch in ARCH eingebunden
          ARCH: "x86_64-${{ matrix.openwrt_version }}"

      - name: Build IPK package
        run: |
          make package/compile V=s

      - name: Collect IPK packages
        run: |
          # Lege einen Unterordner für die jeweilige OpenWRT-Version an
          mkdir -p artifacts/${{ matrix.openwrt_version }}
          # Kopiere alle erstellten IPK-Dateien in den Versions-Unterordner
          cp -v bin/packages/x86_64_${{ matrix.openwrt_version }}/packages/*.ipk artifacts/${{ matrix.openwrt_version }}/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          # Artefaktname enthält die OpenWRT-Version
          name: "ipk-${{ matrix.openwrt_version }}"
          path: "artifacts/${{ matrix.openwrt_version }}/"

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    env:
      OPENWRT_VERSIONS: ${{ env.OPENWRT_VERSIONS }}
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3

      - name: Organize Artifacts
        run: |
          # Konvertiere das JSON-Array in eine whitespace-separierte Liste
          VERSIONS=$(python3 -c 'import json,sys; print(" ".join(json.loads(sys.argv[1])))' "${{ env.OPENWRT_VERSIONS }}")
          mkdir -p artifacts_all
          for version in $VERSIONS; do
            if [ -d "ipk-${version}" ]; then
              echo "Processing version: $version"
              mkdir -p artifacts_all/${version}
              cp -v ipk-${version}/* artifacts_all/${version}/
            else
              echo "Artifact für Version $version nicht gefunden!"
            fi
          done

      - name: Rename IPK files
        run: |
          # Optional: Datei-Umbennenung zur besseren Unterscheidung der Version in den Dateinamen
          for version in $(python3 -c 'import json,sys; print(" ".join(json.loads(sys.argv[1])))' "${{ env.OPENWRT_VERSIONS }}"); do
            # Beispiel: Umbenennung von Standard-Paketen
            for file in artifacts_all/${version}/quectel-rm520n-thermal_*_all.ipk; do
              if [ -f "$file" ]; then
                mv "$file" "${file%.ipk}_${version}.ipk"
              fi
            done
            # Beispiel: Umbenennung von Kernelmodul-Paketen
            for file in artifacts_all/${version}/kmod-quectel-rm520n-thermal_*_all.ipk; do
              if [ -f "$file" ]; then
                mv "$file" "${file%_all.ipk}_${version}_all.ipk"
              fi
            done
          done

      - name: Create ZIP archive of artifacts
        run: |
          zip -r openwrt_packages.zip artifacts_all

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: openwrt_packages.zip
          body: |
            ## OpenWRT Packages

            Diese ZIP-Datei enthält für jede OpenWRT Version einen Unterordner mit den erstellten IPK-Dateien.
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
