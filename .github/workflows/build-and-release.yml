name: Build and Release OpenWRT IPK

on:
  push:
    tags:
      - "*.*.*-r*"
  workflow_dispatch:

jobs:
  set-versions:
    name: Set OpenWRT Versions
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.set.outputs.versions }}
    steps:
      - id: set
        run: |
          # Hier definieren wir zentral, welche OpenWRT-Versionen gebaut werden sollen.
          echo "::set-output name=versions::$(echo '["23.05","24.10"]')"

  build:
    name: Build OpenWRT IPK
    needs: set-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        openwrt_version: ${{ fromJson(needs.set-versions.outputs.versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up OpenWRT SDK
        uses: openwrt/gh-action-sdk@main
        env:
          # Dynamische Verwendung der jeweiligen OpenWRT-Version im ARCH-Parameter
          ARCH: "x86_64-${{ matrix.openwrt_version }}"

      - name: Build IPK package
        run: |
          make package/compile V=s

      - name: Collect IPK packages
        run: |
          # Erstellen eines Unterordners f체r die jeweilige OpenWRT-Version
          mkdir -p artifacts/${{ matrix.openwrt_version }}
          # Kopiere alle erstellten IPK-Dateien in den entsprechenden Unterordner
          cp -v bin/packages/x86_64_${{ matrix.openwrt_version }}/packages/*.ipk artifacts/${{ matrix.openwrt_version }}/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          # Artefaktname enth채lt die OpenWRT-Version
          name: "ipk-${{ matrix.openwrt_version }}"
          path: "artifacts/${{ matrix.openwrt_version }}/"

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3

      - name: Organize Artifacts
        run: |
          # Hole die zentral definierten Versionen aus dem Output des set-versions Jobs
          VERSIONS=$(python3 -c 'import json,sys; print(" ".join(json.loads(sys.argv[1])))' '${{ needs.set-versions.outputs.versions }}')
          mkdir -p artifacts_all
          for version in $VERSIONS; do
            if [ -d "ipk-${version}" ]; then
              echo "Processing version: $version"
              mkdir -p artifacts_all/${version}
              cp -v ipk-${version}/* artifacts_all/${version}/
            else
              echo "Artifact for version $version not found!"
            fi
          done

      - name: Rename IPK files
        run: |
          for version in $(python3 -c 'import json,sys; print(" ".join(json.loads(sys.argv[1])))' '${{ needs.set-versions.outputs.versions }}'); do
            # Beispiel: Umbenennung von Standard-Paketen
            for file in artifacts_all/${version}/quectel-rm520n-thermal_*_all.ipk; do
              if [ -f "$file" ]; then
                mv "$file" "${file%.ipk}_${version}.ipk"
              fi
            done
            # Beispiel: Umbenennung von Kernelmodul-Paketen
            for file in artifacts_all/${version}/kmod-quectel-rm520n-thermal_*_all.ipk; do
              if [ -f "$file" ]; then
                mv "$file" "${file%_all.ipk}_${version}_all.ipk"
              fi
            done
          done

      - name: Create ZIP archive of artifacts
        run: |
          zip -r openwrt_packages.zip artifacts_all

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: openwrt_packages.zip
          body: |
            ## OpenWRT Packages

            Diese ZIP-Datei enth채lt f체r jede OpenWRT-Version einen Unterordner mit den erstellten IPK-Dateien.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
