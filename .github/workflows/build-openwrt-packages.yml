name: Build OpenWRT Packages and Release

on:
  push:
    tags:
      - '*.*.*-r*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        openwrt_version: [24.10.0, 23.05.0]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU (fÃ¼r Multi-Arch)
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /home/runner/.cache/docker
          key: ${{ runner.os }}-docker-${{ matrix.openwrt_version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ matrix.openwrt_version }}-

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: .github/workflows/build-openwrt-packages/Dockerfile
          platforms: linux/amd64
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: openwrt_build:${{ matrix.openwrt_version }}

      - name: Prepare bin-Verzeichnis
        run: mkdir -p bin/${{ matrix.openwrt_version }}

      - name: Build OpenWRT Packages
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/bin/${{ matrix.openwrt_version }}:/openwrt-bin \
            -e OPENWRT_VERSION=${{ matrix.openwrt_version }} \
            -e GIT_TAG=${{ github.ref_name }} \
            --platform linux/amd64 \
            -u user \
            openwrt_build:${{ matrix.openwrt_version }} \
            bash ${{ github.workspace }}/.github/workflows/build-openwrt-packages/commands.sh

      - name: Prepare Release Assets
        id: prep_assets
        run: |
          SHORT_VER=$(echo ${{ matrix.openwrt_version }} | awk -F. '{print $1 "." $2}')
          mkdir -p $SHORT_VER
          KMOD_FILE=$(ls bin/${{ matrix.openwrt_version }}/$SHORT_VER/kmod-quectel-rm520n-thermal_*_${{ github.ref_name }}_all.ipk)
          DAEMON_FILE=$(ls bin/${{ matrix.openwrt_version }}/$SHORT_VER/quectel-rm520n-thermal_${{ github.ref_name }}_all.ipk)
          cp "$KMOD_FILE" $SHORT_VER/
          cp "$DAEMON_FILE" $SHORT_VER/
          echo "kmod_asset=$SHORT_VER/$(basename $KMOD_FILE)" >> $GITHUB_OUTPUT
          echo "daemon_asset=$SHORT_VER/$(basename $DAEMON_FILE)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ''
          draft: true
          prerelease: false

      - name: Upload Kernel-Module Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prep_assets.outputs.kmod_asset }}
          asset_name: ${{ steps.prep_assets.outputs.kmod_asset }}
          asset_content_type: application/octet-stream

      - name: Upload Daemon Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prep_assets.outputs.daemon_asset }}
          asset_name: ${{ steps.prep_assets.outputs.daemon_asset }}
          asset_content_type: application/octet-stream
