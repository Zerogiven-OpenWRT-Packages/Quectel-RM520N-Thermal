name: Build OpenWRT Packages and Release

on:
  push:
    tags:
      - '*.*.*-r*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        openwrt_version: [24.10.0]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Restore OpenWRT build cache
        uses: actions/cache@v3
        with:
          path: openwrt-cache/${{ matrix.openwrt_version }}
          key: openwrt-${{ matrix.openwrt_version }}-build-cache
          restore-keys: |
            openwrt-${{ matrix.openwrt_version }}-build-cache

      # Docker layer caching via build-push-action cache-from/cache-to
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: .github/workflows/build-openwrt-packages/Dockerfile
          platforms: linux/amd64
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: openwrt_build:${{ matrix.openwrt_version }}

      - name: Ensure cache & bin directories exist and fix permissions
        run: |
          mkdir -p ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }} && \
          chmod -R a+rwX ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }} && \
          mkdir -p ${{ github.workspace }}/bin/${{ matrix.openwrt_version }} && \
          chmod -R a+rwX ${{ github.workspace }}/bin/${{ matrix.openwrt_version }}

      - name: Clone OpenWRT sources (cached)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }}:/home/user/openwrt \
            --platform linux/amd64 \
            -u user \
            openwrt_build:${{ matrix.openwrt_version }} \
            bash -eo pipefail -c 'sudo chown -R user:user /home/user/openwrt && \
              if [ ! -d /home/user/openwrt/.git ]; then \
                git clone --branch v${{ matrix.openwrt_version }} https://git.openwrt.org/openwrt/openwrt.git /home/user/openwrt; \
              fi'

      - name: Clone package repo (not cached)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }}:/home/user/openwrt \
            --platform linux/amd64 \
            -u user \
            openwrt_build:${{ matrix.openwrt_version }} \
            bash -eo pipefail -c 'rm -rf /home/user/openwrt/package/quectel-rm520n-thermal && \
              git clone --branch ${{ github.ref_name }} https://github.com/Zerogiven-OpenWRT-Packages/Quectel-RM520N-Thermal.git /home/user/openwrt/package/quectel-rm520n-thermal'  

      - name: Prepare OpenWRT feeds & config (not cached)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }}:/home/user/openwrt \
            -e OPENWRT_VERSION=${{ matrix.openwrt_version }} \
            --platform linux/amd64 \
            -u user \
            openwrt_build:${{ matrix.openwrt_version }} \
            bash ${{ github.workspace }}/.github/workflows/build-openwrt-packages/prepare.sh

      - name: Run OpenWRT full build (cached)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }}:/home/user/openwrt \
            --platform linux/amd64 \
            -u user \
            openwrt_build:${{ matrix.openwrt_version }} \
            bash ${{ github.workspace }}/.github/workflows/build-openwrt-packages/prepare-make.sh

      # - name: Build package and copy artifacts (not cached)
      #   run: |
      #     docker run --rm \
      #       -v ${{ github.workspace }}/openwrt-cache/${{ matrix.openwrt_version }}:/home/user/openwrt \
      #       -v ${{ github.workspace }}/bin/${{ matrix.openwrt_version }}:/openwrt-bin \
      #       -e OPENWRT_VERSION=${{ matrix.openwrt_version }} \
      #       -e GIT_TAG=${{ github.ref_name }} \
      #       --platform linux/amd64 \
      #       -u user \
      #       openwrt_build:${{ matrix.openwrt_version }} \
      #       bash ${{ github.workspace }}/.github/workflows/build-openwrt-packages/finish.sh

      - name: Save OpenWRT build cache
        uses: actions/cache@v3
        with:
          path: openwrt-cache/${{ matrix.openwrt_version }}
          key: openwrt-${{ matrix.openwrt_version }}-build-cache

      # - name: Prepare Release Assets
      #   id: prep_assets
      #   run: |
      #     SHORT_VER=$(echo ${{ matrix.openwrt_version }} | awk -F. '{print $1 "." $2}')
      #     mkdir -p $SHORT_VER
      #     KMOD_FILE=$(ls ${{ github.workspace }}/bin/$SHORT_VER/kmod-quectel-rm520n-thermal*.ipk)
      #     DAEMON_FILE=$(ls ${{ github.workspace }}/bin/$SHORT_VER/quectel-rm520n-thermal*.ipk)
      #     cp "$KMOD_FILE" $SHORT_VER/
      #     cp "$DAEMON_FILE" $SHORT_VER/
      #     echo "kmod_asset=$SHORT_VER/$(basename $KMOD_FILE)" >> $GITHUB_OUTPUT
      #     echo "daemon_asset=$SHORT_VER/$(basename $DAEMON_FILE)" >> $GITHUB_OUTPUT

      # - name: Create GitHub Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     release_name: ${{ github.ref_name }}
      #     body: ''
      #     draft: true
      #     prerelease: false

      # - name: Upload Kernel-Module Package
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ steps.prep_assets.outputs.kmod_asset }}
      #     asset_name: ${{ steps.prep_assets.outputs.kmod_asset }}
      #     asset_content_type: application/octet-stream

      # - name: Upload Daemon Package
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ${{ steps.prep_assets.outputs.daemon_asset }}
      #     asset_name: ${{ steps.prep_assets.outputs.daemon_asset }}
      #     asset_content_type: application/octet-stream
